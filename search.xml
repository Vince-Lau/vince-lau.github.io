<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>四化大业：论算法工程师的自我修养</title>
      <link href="2020/12/28/%E5%9B%9B%E5%8C%96%E5%A4%A7%E4%B8%9A%EF%BC%9A%E8%AE%BA%E7%AE%97%E6%B3%95%E5%B7%A5%E7%A8%8B%E5%B8%88%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB/"/>
      <url>2020/12/28/%E5%9B%9B%E5%8C%96%E5%A4%A7%E4%B8%9A%EF%BC%9A%E8%AE%BA%E7%AE%97%E6%B3%95%E5%B7%A5%E7%A8%8B%E5%B8%88%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB/</url>
      
        <content type="html"><![CDATA[<div class="note success flat"><p>转载自<a href="https://mp.weixin.qq.com/s?__biz=MzI5NTU2ODQzMg==&mid=2247483933&idx=1&sn=cfd33689d748352612f8dada2d90ad2e&chksm=ec50d742db275e54117b936fd582be203b4c6ef5a1fbe2923aba889e644419b175e8ae511b48&mpshare=1&scene=1&srcid=0106bB5vscPpMzfsgLCpWD9C&sharer_sharetime=1609919511888&sharer_shareid=b06a212be731b0ff443b093da6a6fc2c&key=f9ceef3b2af59af1d85c52cdf6671fbe9897fdaf5980f674645d095b444a96a204d8f0e6590d89cc9871f7c031ffe1ab357ee872da0ea8effb7968c93fcab6f60a6a7d864f9f542acb050817146c8f8b7ae25ac8dc534ed2a2c170df65036cded7d1955b725ab4b9dbafea6a9b89c1a7e67f7f6a1b25b8e4c2f522fadf61c2bb&ascene=1&uin=MjU1ODU5NzEwMw==&devicetype=Windows+10+x64&version=62090070&lang=zh_CN&exportkey=AZAJvVXpQmIlJu/QKd85G2k=&pass_ticket=JKxl6cHyNbvJKZf/fYXPQXrFoKt2gRyUydb52SVJeHW2KDB8YSTBDV28HcB4fcgB&wx_header=0">四化大业：论算法工程师的自我修养</a></p></div><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本文将根据我的实践经验，讨论一个算法工程师，如何提升自我修养，由菜鸟小白进化为高手。</p><p>本文同样不关注某个具体算法那样的“术”，也不像《<a href="http://mp.weixin.qq.com/s?__biz=MzI5NTU2ODQzMg==&mid=2247483928&idx=1&sn=2f64b1e496930e9bf7456aeb0a7dbbc5&chksm=ec50d747db275e51ed5d52e4eb8cfe359233f51ed2a6921991ad8b0820485c1ad52442d2951e&scene=21#wechat_redirect">推荐算法的”五环之歌”</a>》讲“算法”之道，而是聚集于“<strong>算法工程</strong>”之道，即如何将算法从纸面落地于实际项目中。毕竟大家都是工程师出身，做算法的目的，既不是在象牙塔中灌水发文章，也不是打Kaggle比赛那种”一锤子”买卖。我们做算法的终极目标，是要在复杂的互联网工业环境中成功落地，能够取得收益，最重要的，能够持续取得收益。否则，掌握再多的NN、FM、Attention，也只不过是纸上谈兵罢了。</p><h1 id="理论化：扎实的知识基础"><a href="#理论化：扎实的知识基础" class="headerlink" title="理论化：扎实的知识基础"></a>理论化：扎实的知识基础</h1><p>虽然讲工程， 但还是需要对算法的充分理解做基础。项目开始前，选择最可能产生收益的算法来实现，算法遇到问题，找到最可能的原因，这些都需要扎实的算法理论为后盾。否则，如果你只会将别人口中的知名的算法挨个试一遍，在机器已经开始能够自动调参，能自动搜索最优网络结构的今天，你作为一个工程师的价值在哪里？</p><h2 id="体系化-脉络化"><a href="#体系化-脉络化" class="headerlink" title="体系化+脉络化"></a>体系化+脉络化</h2><p>现在讲算法的文章不是太少，而是太多，信息爆炸。每年KDD，SIGIR，CIKM上有那么多中外的王婆一起卖瓜，各种各样的NN、FM、Attention满天飞，其中不乏实打实的干货，更不缺乏湿漉漉的灌水文，让算法新人无所适从。这是因为这些同学孤立地读论文，结果只能是一叶障目，只见树木，不见森林。轮到自己的项目，选作者来头最大的、发布时间最新的来实现，与“听小道消息买股票”没啥区别。</p><p>正确的姿势应该是，<strong>梳理一门学问的脉络，构建自己的知识体系</strong>。只有这样，才能真正将各篇论文中的观点<strong>融汇贯通</strong>。在自己的项目中，采各家之所长，构建最适合自己项目的算法。我已经在《<a href="http://mp.weixin.qq.com/s?__biz=MzI5NTU2ODQzMg==&mid=2247483928&idx=1&sn=2f64b1e496930e9bf7456aeb0a7dbbc5&chksm=ec50d747db275e51ed5d52e4eb8cfe359233f51ed2a6921991ad8b0820485c1ad52442d2951e&scene=21#wechat_redirect">推荐算法的”五环之歌”</a>》和《<a href="http://mp.weixin.qq.com/s?__biz=MzI5NTU2ODQzMg==&mid=2247483865&idx=1&sn=e7e262d1f56bbdfdfb8bd27d2edb35dc&chksm=ec50d486db275d90a923bf747894202559688209acc029369387bd699c77fcefc4cdbfe7dcd0&scene=21#wechat_redirect">无中生有：论推荐算法中的Embedding思想</a>》梳理了推荐算法的发展脉络，请感兴趣的同学移步阅读。</p><h2 id="重视基本功"><a href="#重视基本功" class="headerlink" title="重视基本功"></a>重视基本功</h2><p>现如今，有些人将各种NN+FM+Attention像搭积木一样拼来拼去，组成一个全新的网络结构，起个古怪的名字，就能够在KDD, SIGIR, CIKM成功灌水，让一众算法新人趋之若鹜。我劝大家，<strong>不要沉迷于奇形怪状的NN结构</strong>，千万不要以为它们是能够解决你问题的“银弹”，更不要相信什么“深度学习使特征工程过时”这样的外行话。</p><p>像我在《<a href="http://mp.weixin.qq.com/s?__biz=MzI5NTU2ODQzMg==&mid=2247483691&idx=1&sn=dc84822bd29ea7f89326cece56157d88&chksm=ec50d474db275d622f4b6ccf2a70cf07b9e9446152be23a5651aa1b0a91c02412c40afd5974f&scene=21#wechat_redirect">负样本为王：评Facebook的向量化召回算法</a>》一文中的观点，“<strong>排序是特征的艺术，召回是样本的艺术</strong>”，特征工程、样本选择这样的基本功，才值得广大算法同行重视。否则，喂入的样本与特征都有问题，garbage in, garbage out，再fancy的NN也不过是沙滩上的城堡。</p><h2 id="正确对待细节"><a href="#正确对待细节" class="headerlink" title="正确对待细节"></a>正确对待细节</h2><h3 id="关注细节"><a href="#关注细节" class="headerlink" title="关注细节"></a>关注细节</h3><p>通过面试，我发现很多人好读书，但不求甚解。知道很多算法，但一问细节都不掌握，孰不知，算法成败的关键都在细节里。随便举几个例子：</p><ul><li><p>Wide&amp;Deep为什么用了两个优化器分别优化Wide侧和Deep侧？</p></li><li><p>DSSM中的负样本为什么是随机采样得到的，而不用“曝光未点击”当负样本？</p></li><li><p>在DNN中加入position bias为什么不能和其他特征一样喂入DNN底层，而必须通过一个浅层网络接入？</p></li></ul><p>细节搞清楚了，才算你真正搞明白了一门算法，未来你才能放心使用它。</p><h3 id="也不要拘泥于细节"><a href="#也不要拘泥于细节" class="headerlink" title="也不要拘泥于细节"></a>也不要拘泥于细节</h3><p>要从本质上理解算法，而不要形而上学。比如，Youtube召回模型与双塔召回模型，前者使用sampled softmax loss，后者使用hinge loss或bpr loss，到底有没有必要在你的推荐系统中都实现一遍？我个人的观点，尽管二者在细节上有很多不同，但是它们本质上都属于Pairwise LTR，优化目标都是让user embedding与正例item embedding足够近，而与负例item embedding距离足够远。因此，没必要在一个系统中分别实现，而应该合二为一，否则召回结果高度重合，对大盘指标发挥不了多少作用。</p><h2 id="练习不依赖框架实现一遍算法"><a href="#练习不依赖框架实现一遍算法" class="headerlink" title="练习不依赖框架实现一遍算法"></a>练习不依赖框架实现一遍算法</h2><p>Keras、PyTorch之类的框架，将实现深度学习算法，变成了基本模块的拼装，大大降低了实现难度，但也此同时也使很多同学固步自封，没有兴趣再去了解算法细节。比如，如果你调用TensorFlow自带DNNLinearCombinedClassifier来实现Wide&amp;Deep，你能想到如何实现用两个优化器分布优化Wide侧与Deep侧吗？</p><p>掌握算法细节最彻底的方式，莫过于不借助高级框架，自己动手从头实现一遍。在实现过程中，除了要保证准确无误，还要考虑程序的运行效率。</p><p>如果时间不允许，看看别人是如何从头实现的，对提升自己的算法功力，也大有裨益。对Wide&amp;Deep实现细节感兴趣的同学，可以看我的另一遍文章《用NumPy手工打造 Wide &amp; Deep》。对FM感兴趣的同学，强烈建议通读一遍alphaFM的源代码。</p><h1 id="规范化：写得一手好代码"><a href="#规范化：写得一手好代码" class="headerlink" title="规范化：写得一手好代码"></a>规范化：写得一手好代码</h1><h2 id="算法落地的痛点"><a href="#算法落地的痛点" class="headerlink" title="算法落地的痛点"></a>算法落地的痛点</h2><h3 id="链条太长"><a href="#链条太长" class="headerlink" title="链条太长"></a>链条太长</h3><p>落地一个算法，需要经过“文献调研→算法选型→收集样本→特征工程→模型编码→离线测试→线上AB实验”这漫长的链条，线上AB测试起码要一周以上，得出的结论才solid。全新算法的落地，花费的时间以月计，牵扯算法、工程多方人员的配合。不到最后一刻，我们都不知道算法的成败，但是无论哪个环节出错，都可能导致算法落地功亏一篑。</p><h3 id="不容易debug"><a href="#不容易debug" class="headerlink" title="不容易debug"></a>不容易debug</h3><p>如前所述，算法落地的中间环节太多，每个环节都可能出问题。</p><ul><li>一开始选择的算法，可能压根就不合适你们的场景</li><li>有脏数据。但是线上数据存在个别脏数据，再正常不过了。况且，在几T的数据中查找几千条脏数据，无异于大海捞针</li><li>算法实现有bug</li><li>超参不合适。当算法没效果时，很多算法同学不愿相信数据或模型有问题，觉得只要调调超参就能fix，但是大多数时候，这种想法不过一相情愿罢了。</li></ul><p>而最困难的地方在于，你有可能压根就察觉不出问题。线上AB测试有了正向效果，大家就觉得功德圆满了，可以开心写工作总结了。但是孰不知，代码依然有bug，修正后，线上指标会有更明显的提升。</p><h3 id="解决痛点要靠“防患于未然”"><a href="#解决痛点要靠“防患于未然”" class="headerlink" title="解决痛点要靠“防患于未然”"></a>解决痛点要靠“防患于未然”</h3><p>既然算法项目不好debug，就尽量不要出bug。就好比，二战中德国空军涌现出各参战国中最多的王牌飞行员，好几位的击落战绩过百，但是二战德国空军谈不上是最优秀的空军。我个人最欣赏的是以色列空军，“犹太长臂”追求的是，战端一开，就把敌人的飞机都击毁在地面，使其压根没有升空的机会。</p><p>如何才能做到少出、不出bug？一要靠良好的编程习惯，二要靠小心谨慎的态度。</p><h2 id="良好的编程习惯"><a href="#良好的编程习惯" class="headerlink" title="良好的编程习惯"></a>良好的编程习惯</h2><p>良好的编程习惯和你刷过多少leetcode题没关系。而且就个人感受而言，前者要比后者更重要。因为，在日常算法编程工作中，我们很少用得上leetcode的解题思路，但是良好的编程习惯却贯穿码农生涯的始终。</p><p>良好的编程习惯，说来也不复杂，无外乎就那么几条</p><ul><li>花点心思在命名上，给类、函数、变量起个“见名知义”的好名字。</li><li>模块化。不要一个功能，从头写到尾，写成一个几百行的大函数。而要将其拆分成其他函数或类。</li><li>注意代码复用，最忌讳拷贝代码。</li><li>开闭原则，代码模块应该对扩展开放，而对修改封闭。</li><li>单一职责原则，每个代码模块只负责单一功能，不要将杂七杂八的功能都写到一个类或函数中。</li></ul><p>看似简单，但是这些习惯能够使你的代码清晰、易读。而易读的代码容易发现问题。但是，这几条规则，知易行难，做不到的人，归根到底还是一个“懒”字。</p><p>另外，我强烈建议，<strong>限制使用jupyter notebook</strong>。可能是受许多公开课的影响，很多人喜欢在notebook中写程序、调模型，毕竟jupyter notebook能够边写代码，边运行查看结果，再加上图表可视化，功能上的确很有吸引力。</p><p>但是，在notebook写代码，完全没有条理，想到哪里，写到哪里，你不会想到要划分函数或类。另外，在notebook中非常容易就使用了全局变量，使你的代码变成紧密耦合的意大利肉酱面。notebook的底层存储格式，将算法逻辑代码与页面渲染代码，杂揉一处，使版本控制失去了作用。因此，我对jupyter notebook的态度就是草稿纸，做一些前期的数据探索性分析还可以，实战代码免谈。</p><h2 id="小心谨慎的态度"><a href="#小心谨慎的态度" class="headerlink" title="小心谨慎的态度"></a>小心谨慎的态度</h2><p>我写代码，一来写的时候，就小心遵循着以上那些良好的编程习惯，保持代码清晰、易读。小心到什么程度？比如，我将向量命名为user_embedding/doc_embedding，而不是embedding_user/embedding_doc。这是因为现在的IDE都有代码自动提示功能，如果采用将共同部分作为名字的前缀，我担心要用到embedding_user的地方，当我输入embedding前缀时，IDE就自动提示embedding_doc，而我不小心一回车，就张冠李戴，犯下错误。</p><p>第二，写完代码后，不着急吼吼地就接入数据，开始训练，我起码要将代码检查上两遍。检查时，要设想各种corner case，比如各种可能的脏数据。而以前Quora上有一个问题就是“算法工程师在等待模型的训练结果时做什么？”，而我会利用那段时间，再次检查我的代码。</p><p>总而言之，就是我们在开发算法代码时，要<strong>小心、小心、再小心</strong>。因为每个环节犯下的bug，都有可能导致算法落地失败，使你和团队投入的时间精力付之东流。更可怕的是，由于大数据+黑盒模型的双重影响，你犯下的bug会非常非常难于被发现。</p><h1 id="数字化：构建模型的指标看板"><a href="#数字化：构建模型的指标看板" class="headerlink" title="数字化：构建模型的指标看板"></a>数字化：构建模型的指标看板</h1><p>现如今，深度学习大行其道，在带来模型性能提升的同时，也使模型愈发“黑盒”化，使之不容易调优，出现问题，也不好定位原因。</p><p>面对模型黑盒，打开它是一种思路。学术界提出很多特征解释算法，但是受限于这些算法的复杂度，在工业界落地的并不多。另一种思路就是，没必要打开黑盒，只要对模型的输入输出长期监控，通过历史数据的积累，也能对模型的行为建立合理的预期。一旦模型出现异常，我们也能够很快发现并定位原因。本小节就是介绍如何实现这第2种思路。</p><p>接下来所说的指标分两种，<strong>输入模型的的上游数据的指标，和模型的离线评测指标</strong>，不包括线上业务指标。这是因为，第一，线上指标受其他非模型因素（e.g., 节假日或运营）的影响比较大；第二，线上业务指标会有专门的人员与工具去分析；第三，线上指标已经是target了，它出了问题只能告诉我们模型可能出了问题，但是对于定位问题还远远不够。</p><h2 id="重视离线评测指标"><a href="#重视离线评测指标" class="headerlink" title="重视离线评测指标"></a>重视离线评测指标</h2><p>我认识一个有几年工作经验的老菜鸟 （这才是最可悲的），团队分配他去做一个召回模型，很快跑出模型，离线AUC还可以（这就是理论水平不足埋下的隐患，用AUC是照搬排序时的经验，而召回模型因为没有真负样本，很少用AUC评价），加上team leader是个工程出身，对算法一知半解，就批准他上线。接下来几个星期，他就只知道催工程同学帮他上线模型。终于上线了，第一天的线上指标就不好，他选择继续观察，同时尝试不同的超参来撞大运。观察了一个多月，线上指标不升反降，他又去怀疑是工程实现有问题，又去怀疑是ranker打压了新召回。最后实在搞不定，找我帮忙。我拿我自制的召回分析脚本一跑，召回的东西与用户兴趣与历史，驴唇不对马嘴，模型本身就有严重问题，换我是他的team leader，压根就不会批准他上线，浪费大家的时间与精力。</p><p>这个案例留给我们的教训就是，<strong>线上AB实验的代价太高了</strong></p><ul><li><p>一方面，现在的模型越来越复杂，很多时候，上线需要花费工程同学的时间与精力，来保证线上服务的实时性能。更不用说，再小的流量也会影响用户体验。所以，如果你什么样的模型都只能靠上线来一试效果，最终耗费的团队对你的耐心与信任。</p></li><li><p>另一方面，线上AB实验的耗时太长，为了得到solid的实验结果，最起码要进行一周，而且线上指标受非模型因素（e.g.,运营）的影响也比较大。所以，线上实验对模型效果的反馈慢又有噪声，一点也不“敏捷”。</p></li></ul><p>所以，我们一定要<strong>重视模型的离线指标，尽可能在上线前发现模型可能存在的问题</strong></p><ul><li>看论文的时候，指标的具体数值可看可不看，反正都是王婆卖瓜，自卖自夸。但是，<strong>一定要看离线实验的设计</strong>，看作者是怎么无偏地收集测试样本，看作者从哪些维度来评测模型（不是只有准确性，还比如：推荐结果的丰富性、对冷启是否友好、……等），看作者用了哪些指标来衡量模型在各个维度上的性能，看作者如何设计图表使模型性能一目了然。</li><li>另一方面， 指标有时是片面的（比如，召回算法都只召回热门item, 指标未必很差），这时候人工评测模型，虽然土，但是也能发挥效果。比如，我就自制了一个工具来帮助我评测召回模型，采样1000个用户，把每个用户的画像与点击历史展示在左边，把模型召回的item展示在右边。这个工具能让我对召回效果具备最直观的认识，比如：召回结果是不是太偏热门，而缺乏个性化？召回结果是不是只集中于用户的个别兴趣，对用户兴趣的覆盖面太窄？</li></ul><h2 id="指标监控看板"><a href="#指标监控看板" class="headerlink" title="指标监控看板"></a>指标监控看板</h2><p>运维有指标看板来监控机群性能，算法也需要有自己的指标看板来监控模型的性能。</p><ul><li>我们要监控上游的输入数据，比如：每小时有多少样本流入模型？样本中的CTR和平均时长是多少？样本中有多少user/doc/feature？feature经过hash后的冲突率是多少？……</li><li><strong>离线评测不是只在上线之前做一次就完事了，而是也需要周期性运行</strong>，与同时段的上游输入数据的指标相对比，才能让我们对模型建立合理预期，将来定位问题时用得上。常见的监控指标包括，auc/precision/recall等，另外还包括“今天的embedding相较于昨天embedding的变化幅度”这样的对比指标。</li></ul><p>举个例子来说明，指标监控在定位模型问题时发挥的重大作用。我们算法工程师的噩梦之一就是，<strong>之前好好的模型，线上指标（突然或缓慢）掉下来了</strong>。有一天，我就遇到了这样的名场面。借助指标看板，</p><ul><li>首先，我发现模型的离线指标也掉下来了，说明与线上工程实现或外界环境无关，应该是模型本身出问题了</li><li>接着，我发现输入模型的样本中的ctr下降了，说明上游数据出问题了</li><li>询问了负责上游数据的同学，发现他们缩短了等待用户反馈的时间，导致一部分正样本由于未能等到用户反馈被当成负样本，从而定位了问题</li></ul><p>看我的轻描淡写，是不是感觉我解决这个问题超easy。实际情况恰恰相反，当时我还没有构建出针对模型的指标看板，模型的离线指标和输入样本的CTR都是我遇到问题后再手工回溯的，花费了一两天才定位问题。吃一堑，长一智，经此一役，我才充分认识到模型指标看板的重要性，现如今它成为了我团队每个算法工程师的标配。</p><h1 id="自动化：优秀的工程师造工具"><a href="#自动化：优秀的工程师造工具" class="headerlink" title="自动化：优秀的工程师造工具"></a>自动化：优秀的工程师造工具</h1><p>算法工作毕竟是实验科学，所以成功的关键是<strong>高效做实验</strong>（由于线上容量有限，所以下文所说的实验，主要指离线实验）</p><ul><li><p>谈到高效，我们的第一反应是快。单位时间能做的实验越多，尝试的方向（不同特征+不同模型+不同超参）越多，越可能找到最优解。为了能够快速实验，首先，实验的代价必须小，为了新实验要修改代码是不可接受的，最好是修改一下配置，然后一键启动；第二，能够并行跑多组实验，充分发挥算力，这就要求各实验之间完全解耦，比如不会向同一个路径下写入结果。</p></li><li><p>但是，快只是高效的一个方面，能做的实验多了，实验管理就成了问题。</p><ul><li>每个实验，我们都要记录：特征的版本、模型的版本、超参的版本、用哪段时间的数据训练的、在哪段时间上测试的、各种离线指标、……</li><li>跑几十、上百个离线实验非常常见，这么多实验数据，如果缺乏管理，也就无从分析比较，无法得到正确结论，实验等于白做</li><li>手动管理，比如把实验数据记录在excel里，也不是不可以，估计也是大多数算法同行的选择。但是，一来人懒，特别是模型结果不好的时候，更没心情做记录了；二来，实验数据一般在服务器上，而excel在本地笔记本上，记录时不得不ctrl-c/ctrl-v，出错在所难免</li><li>因此，<strong>我们需要一个类似Source Version Control的工具，自动将实验数据管理起来</strong>。</li></ul></li></ul><h2 id="实验管理工具"><a href="#实验管理工具" class="headerlink" title="实验管理工具"></a>实验管理工具</h2><p>这个实验管理工具，应该具备什么样的功能？</p><ul><li>我们下班前配置好要进行的实验，然后一键启动实验</li><li>实验管理系统，自动向后台机群提交多组实验，多组实验并行运行</li><li>每组实验结束后，自动记录实验版本和结果</li><li>明早到了办公室，打开电脑，昨天实验的各种报表、曲线已经ready了</li></ul><p>我在Youtube上看过一个Yelp工程师的介绍，听说Yelp的实验管理系统不仅具备以上功能，而且每个实验结束后，还能向实验发起人发一封邮件，邮件里有完整的实验报告，包含图表与曲线。实验发起人用新参数回一封邮件，后台服务器收到邮件后，就会用新超参数开启下一轮实验。</p><p>网上有一些开源的实验管理工具，但是</p><ul><li>一来，浸入式太强，需要我们修改代码，削足适履地适应那套框架；</li><li>二来，运维也不可能允许你在公共机群内安装一大堆乱七八糟的第三方框架</li></ul><p>因此，我自己动手写一个简单的实验管理工具</p><ul><li>实验是高度配置的，调节使用特征、调节网络结构、调节超参数、……，都通过配置完成，而无需修改代码</li><li>实验一键启动，各环节自动跨平台衔接（数据准备在Spark集群完成，模型在分布式训练集群完成训练与评估），并具备一定容错能力</li><li>多组实验可以并行进行，而一个实验内部“数据准备”与“训练模型”异步进行，以减少等待</li></ul><p>虽然前期投入时间多一些，但是有了实验工具的帮助， 我团队的实验效率大大提高。目前，我们正在朝着Yelp那套工具的方向迈进，已经隐约看到了“边吃着火锅，唱着歌，边调模型”的美好未来。</p><h2 id="利用工具-制造工具"><a href="#利用工具-制造工具" class="headerlink" title="利用工具+制造工具"></a>利用工具+制造工具</h2><p>实验管理工具只是一个例子。事实上，对待工具的态度，是小白与高手的区别之一：</p><ul><li>小白的每个模型都是匠人手工版：为了新实验，要手动改一堆代码，要手动ctrl-c/ctrl-v记录结果，为了等实验结果不敢下班，……</li><li>高手善于利用工具，制造工具。为了每天节省5分钟，他宁可花两天时间造个工具。每天到点下班，吃着火锅，唱着歌，等着实验结果曲线发到手机上。</li></ul><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>本文讲述的，并非某个具体算法的那样的“技”，而是聚集于“<strong>算法工程</strong>”之道，从“<strong>理论化+规范化+数字化+自动化</strong>”四个方面提出了方法论，根据我的实战经验，讨论了如何将算法从纸面落地于一个互联网级别的实际系统中，从而为你老板和你创造价值。</p><p>本文落笔于2021年的1月1日，是我本人在2021年的第一篇文章。请无处不在的互联网记录下我的新年心愿：<strong>希望我和我爱的人在2021年平安顺遂！</strong></p>]]></content>
      
      
      <categories>
          
          <category> 方法论 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 推荐 </tag>
            
            <tag> 算法工程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vmware搭建集群</title>
      <link href="2020/11/08/vmware%E6%90%AD%E5%BB%BA%E9%9B%86%E7%BE%A4/"/>
      <url>2020/11/08/vmware%E6%90%AD%E5%BB%BA%E9%9B%86%E7%BE%A4/</url>
      
        <content type="html"><![CDATA[<h2 id="介绍VMware"><a href="#介绍VMware" class="headerlink" title="介绍VMware"></a>介绍VMware</h2><p>VMware Workstation 是一个虚拟PC的软件，利用VMware工作站，可以在现有的操作系统上虚拟出一个或多个新的硬件环境，相当于模拟出多台新的PC，以此来实现在一台机器上同时运行多个独立的操作系统。VMware 是一种常用的、功能强大的虚拟机管理软件，还有一种比较常用的轻量级的虚拟机管理软件VirtualBox。</p><p>VMware Workstation 是一种虚拟机管理软件，安装该软件后，可以创建多个虚拟机（即虚拟PC），然后在虚拟机上安装操作系统即可，每台虚拟机本身就像一台真正地电脑一样。</p><p>VMware 官方网站：<a href="http://www.vmware.com/">http://www.vmware.com</a></p><p>VMware的主要特点：</p><ul><li>可以在同一台机器上同时运行多个操作系统；</li><li>本机系统可以与虚拟机系统进行网络通信；</li><li>可以随时修改虚拟机系统的硬件环境。</li></ul><h2 id="VMware的下载和安装"><a href="#VMware的下载和安装" class="headerlink" title="VMware的下载和安装"></a>VMware的下载和安装</h2><p>VMware Workstation 15 Pro for Windows（64 位）的下载地址如下：</p><p>官方地址：<a href="https://download3.vmware.com/software/wkst/file/VMware-workstation-full-15.5.0-14665864.exe">https://download3.vmware.com/software/wkst/file/VMware-workstation-full-15.5.0-14665864.exe</a><br>百度网盘地址：（待添加）</p><p>注意：要与VMware的版本对应上，尽量不要使用最新的版本<br>许可证密钥：AZ312-2FE41-M81LP-R6WEZ-NA2Z4（失效了再多找一找）</p><p>上面的任何一个下载地址都可以使用。</p><p>下载完VMware Workstation 12的安装包后，直接安装即可。虽然下载的是试用版，但是我这里提供了密钥，用密钥激活后就可永久免费使用。安装方法很简单，直接双击安装程序，默认安装即可。安装完成后，点击桌面的快捷启动图标，会提示你输入许可证密钥，把上面的密钥输入就可以激活了。</p><h2 id="VMware的使用教程"><a href="#VMware的使用教程" class="headerlink" title="VMware的使用教程"></a>VMware的使用教程</h2><h3 id="安装破解教程"><a href="#安装破解教程" class="headerlink" title="安装破解教程"></a>安装破解教程</h3><p>安装完成，直接输入秘钥即可<br><a href="https://www.dcydz.com/307.html">https://www.dcydz.com/307.html</a><br><a href="https://www.cnblogs.com/mr-xiong/p/12468280.html">https://www.cnblogs.com/mr-xiong/p/12468280.html</a></p><p>输入上面秘钥，可以成功激活</p><p><img src="img/image-20201108164627966.png" alt="image-20201108164627966"></p><h3 id="创建虚拟机教程"><a href="#创建虚拟机教程" class="headerlink" title="创建虚拟机教程"></a>创建虚拟机教程</h3><ul><li><p>固定静态ip</p><p><a href="https://blog.csdn.net/u014466635/article/details/80284792">Vmware虚拟机设置固定IP地址_Owen的博客-CSDN博客</a></p><p><strong>VM虚拟机设置NAT模式，VM虚拟网卡固定好IP不变</strong></p><blockquote><p>windows修改虚拟机设置去固定centos的IP（参考：<a href="https://blog.csdn.net/u014466635/article/details/80284792">Vmware虚拟机设置固定IP地址_Owen的博客-CSDN博客</a></p><p>Mac参考：<a href="https://kb.vmware.com/s/article/1026510">https://kb.vmware.com/s/article/1026510</a></p></blockquote><p>已设置好的，有些参数可以参考，如下所示：</p><p><img src="img/image-20201108193125709.png" alt="image-20201108193125709"></p><p>注：上面的“使用本地DHCP服务……”这一项是没有钩选的</p></li><li><p>通过vmdk文件创建虚拟机</p><p><a href="https://jingyan.baidu.com/article/9113f81b2796852b3214c705.html">VMware通过vmdk文件创建虚拟机-百度经验</a></p></li></ul><h2 id="搭建集群"><a href="#搭建集群" class="headerlink" title="搭建集群"></a>搭建集群</h2><p>每台机器，为方便设置账号密码</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">账号：root</span><br><span class="line">密码：123456</span><br></pre></td></tr></table></figure><h2 id="集群使用"><a href="#集群使用" class="headerlink" title="集群使用"></a>集群使用</h2><h3 id="连接虚拟机上的集群"><a href="#连接虚拟机上的集群" class="headerlink" title="连接虚拟机上的集群"></a>连接虚拟机上的集群</h3><p>测试集群是否有网络，使用<code>ping www.baidu.com</code>测试</p><p>设置好所有集群之后，需要测试主机是否能够连通集群上的机器</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ping 192.168.19.137</span><br><span class="line">ssh root@192.168.19.137</span><br></pre></td></tr></table></figure><p>如果主题不能联通虚拟机的话，需要检查：</p><ul><li>ssh服务是否开启，使用<code>ps -e | grep ssh</code></li><li>虚拟机网络与主机网络是否设置对，参考：<a href="https://blog.csdn.net/u013068789/article/details/80296260?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.channel_param&depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.channel_param">vmware centos7虚拟机可以ping通主机，但是主机ping不通centos7_u013068789的博客-CSDN博客</a></li><li><a href="https://blog.csdn.net/davidhzq/article/details/102539914">NAT模式和桥接模式实现局域网其他物理机器与Vmware虚拟机互相访问_黄志千的博客-CSDN博客</a></li></ul><h3 id="单机版环境"><a href="#单机版环境" class="headerlink" title="单机版环境"></a>单机版环境</h3><ul><li>如果电脑配置太低，建议大家使用单机版</li><li>一台centos hadoop-master， 192.168.19.137</li></ul><h3 id="分布式环境"><a href="#分布式环境" class="headerlink" title="分布式环境"></a>分布式环境</h3><p><strong>三台虚拟机，觉得硬盘可以，配置可以使用</strong></p><p>分别已配置好装有大数据计算环境，并且相应的数据都已经存在数据库和文件中</p><ul><li>hadoop-master</li></ul><p>已经开启hadoop、hbase、spark、hive</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">20160 Jps</span><br><span class="line">18786 Master</span><br><span class="line">4131 RunJar # hive</span><br><span class="line">17395 ResourceManager</span><br><span class="line">19219 Worker</span><br><span class="line">16757 NameNode</span><br><span class="line">17206 SecondaryNameNode</span><br><span class="line">18683 HRegionServer</span><br><span class="line">8637 ThriftServer # happybase使用</span><br><span class="line">18253 HMaster</span><br><span class="line">18159 HQuorumPeer</span><br></pre></td></tr></table></figure><ul><li>hadoop-slave1、hadoop-slave2</li></ul><p>开启hadoop、hbase、spark</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">3857 NodeManager</span><br><span class="line">4290 Worker</span><br><span class="line">4680 Jps</span><br><span class="line">3740 DataNode</span><br><span class="line">3980 HQuorumPeer</span><br><span class="line">4093 HRegionServers</span><br></pre></td></tr></table></figure><p>默认都打开过了</p><p>两种配置当中，都在scripts目录下有一键启动hadoop、hbase、spark的脚本，也有一键关闭hadoop、hbase、spark的脚本</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@hadoop-master scripts]# pwd</span><br><span class="line">/root/scripts</span><br><span class="line">[root@hadoop-master scripts]# ls</span><br><span class="line">all.sh  my.cnf  start.sh  stop.sh</span><br><span class="line">[root@hadoop-master scripts]#</span><br></pre></td></tr></table></figure><p>如果出现相关启动失败，三台hbase同步下时间：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 时间有误差问题同步一下：</span></span><br><span class="line">[root@hadoop-master ~]# ntpdate 0.cn.pool.ntp.org</span><br><span class="line">[root@hadoop-slave1 ~]# ntpdate 0.cn.pool.ntp.org</span><br><span class="line">[root@hadoop-slave2 ~]# ntpdate 0.cn.pool.ntp.org</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 然后指定全部关闭</span></span><br><span class="line">[root@hadoop-master ~]#. stop.sh</span><br><span class="line"><span class="meta">#</span><span class="bash"> 全部启动</span></span><br><span class="line">[root@hadoop-master ~]#. start.sh</span><br></pre></td></tr></table></figure><p>确定本地库都已经启动：</p><p>hadoop</p><p><img src="img/hadoop%E5%90%AF%E5%8A%A8%E5%A5%BD%E7%9A%84.png" alt="img"></p><p>hbase</p><p><img src="img/hbase%E5%90%AF%E5%8A%A8%E5%A5%BD%E7%9A%84.png" alt="img"></p><p>spark</p><p><img src="img/spark%E5%90%AF%E5%8A%A8%E5%A5%BD%E7%9A%84.png" alt="img"></p><h3 id="python环境"><a href="#python环境" class="headerlink" title="python环境"></a>python环境</h3><p>装有anaconda系列虚拟环境即可，在这里先创建一个用于后面项目使用的虚拟环境，centos已提供miniconda2环境</p><p>以下环境：都在三台centos中安装</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">conda create -n reco_sys python=3.6.7</span><br><span class="line"></span><br><span class="line">pip install -r requirements.txt --ignore-installed</span><br></pre></td></tr></table></figure><h2 id="开发配置"><a href="#开发配置" class="headerlink" title="开发配置"></a>开发配置</h2><p>pycharm关联连接本地项目与centos项目目录开发，配置如下，添加远程机器的IP和用户名，往后密码以及python环境位置，本地关联远程工程目录</p><p><img src="img/%E6%B7%BB%E5%8A%A0%E6%AD%A5%E9%AA%A4.png" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spark </tag>
            
            <tag> vmware </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客网站开发</title>
      <link href="2020/05/12/%E6%9C%80%E6%96%B0%E4%B8%80%E7%89%88%E6%9C%AC%E5%8D%9A%E5%AE%A2%E5%BC%80%E5%8F%91%E8%BF%9B%E5%BA%A6/"/>
      <url>2020/05/12/%E6%9C%80%E6%96%B0%E4%B8%80%E7%89%88%E6%9C%AC%E5%8D%9A%E5%AE%A2%E5%BC%80%E5%8F%91%E8%BF%9B%E5%BA%A6/</url>
      
        <content type="html"><![CDATA[<h1 id="初始化进度"><a href="#初始化进度" class="headerlink" title="初始化进度"></a>初始化进度</h1><h2 id="2-主题页面"><a href="#2-主题页面" class="headerlink" title="2. 主题页面"></a><a href="https://butterfly.js.org/posts/dc584b87/#Front-matter">2. 主题页面</a></h2><ul><li><input disabled="" type="checkbox"> page页补充描述</li><li><input disabled="" type="checkbox"> post配置默认</li><li><input disabled="" type="checkbox"> 音乐、电影、图库、说说（可以有页面，搭建好）</li></ul><h2 id="3-主题配置-1"><a href="#3-主题配置-1" class="headerlink" title="3. 主题配置-1"></a><a href="https://butterfly.js.org/posts/4aa8abbe/">3. 主题配置-1</a></h2><ul><li><input disabled="" type="checkbox"> 社交图标添加，微信等</li><li><input disabled="" type="checkbox"> 顶部图的设计</li><li><input checked="" disabled="" type="checkbox"> 文章置顶（在fron-master添加）</li><li><input disabled="" type="checkbox"> 文章cover添加随机图（搭建图库之后可以弄一个）</li><li><input disabled="" type="checkbox"> 文章打赏</li></ul><h2 id="4-主题配置-2"><a href="#4-主题配置-2" class="headerlink" title="4. 主题配置-2"></a><a href="https://butterfly.js.org/posts/ceeb73f/">4. 主题配置-2</a></h2><h2 id="5-主题问答"><a href="#5-主题问答" class="headerlink" title="5. 主题问答"></a><a href="https://butterfly.js.org/posts/98d20436/">5. 主题问答</a></h2><h1 id="项目进度"><a href="#项目进度" class="headerlink" title="项目进度"></a>项目进度</h1><ul><li><input disabled="" type="checkbox"> 图库建设</li><li><input disabled="" type="checkbox"> 图标保存在本地加速</li><li><input disabled="" type="checkbox"> 网站统计</li><li><input disabled="" type="checkbox"> 文章短链</li><li><input disabled="" type="checkbox"> 社交图标</li><li><input disabled="" type="checkbox"> 文章评论 </li><li><input disabled="" type="checkbox"> 文章打赏</li><li><input disabled="" type="checkbox"> 文章分享</li><li><input disabled="" type="checkbox"> 版权申明</li><li><input disabled="" type="checkbox"> 文章置顶</li><li><input disabled="" type="checkbox"> 文章隐藏</li><li><input disabled="" type="checkbox"> <strong>公式支持优化</strong></li><li><input disabled="" type="checkbox"> 文章封面</li><li><input disabled="" type="checkbox"> 图床</li><li><input disabled="" type="checkbox"> 相关推荐</li><li><input disabled="" type="checkbox"> 公告美化（类似大白萝卜）</li><li><input disabled="" type="checkbox"> 美化</li></ul><div class="note warning flat"><p>此文档也用于一些功能的测试，此处文字说明用作语句块warning的测试</p></div><div class="note success flat"><p>近一个月陆续解决了主题上的一些bug，最新重作的这个版本不错，但是其他人编辑，一些环境依赖的移植问题还需解决，此处文字说明用作语句块success的测试。</p></div><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><h2 id="紧急"><a href="#紧急" class="headerlink" title="紧急"></a>紧急</h2><ul><li>公告需修改</li><li>引用链接不是中文，有乱码</li><li>图标显示失败</li></ul><h2 id="评论"><a href="#评论" class="headerlink" title="评论"></a>评论</h2><p>使用disqus评论服务，需要申请API，网站需要使用公用账户注册</p><p>或者，使用gitalk，有很多评论服务可供删选，这一块还要花费很大力气弄</p><h2 id="打赏"><a href="#打赏" class="headerlink" title="打赏"></a>打赏</h2><p>需要添加学长账户的二维码，还需要增加打赏人的名单</p><h2 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h2><p>需要增加<a href="https://docs.jerryc.me/#/zh-cn/config/theme-config?id=algolia">Algolia</a>搜索和本地搜索，后端还没配置，因为前端还没设计好</p><h1 id="计划"><a href="#计划" class="headerlink" title="计划"></a>计划</h1><ul><li>文章评分功能</li><li>文章推荐栏</li><li><a href="https://docs.jerryc.me/#/zh-cn/diy/Daovoice">基于Daovoice的实时聊天</a></li><li><a href="https://docs.jerryc.me/#/zh-cn/diy/gitalk-widget">基于Gitalk的侧边栏动态</a></li><li><a href="https://docs.jerryc.me/#/zh-cn/config/theme-config?id=%E8%B0%B7%E6%AD%8C%E5%B9%BF%E5%91%8A">谷歌广告植入</a></li></ul><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><h2 id="公式测试"><a href="#公式测试" class="headerlink" title="公式测试"></a>公式测试</h2>]]></content>
      
      
      <categories>
          
          <category> tools </category>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> butterfly </tag>
            
            <tag> blog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="2020/05/10/hello-world/"/>
      <url>2020/05/10/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>hexo使用及踩坑</title>
      <link href="2020/02/27/hexo%E4%BD%BF%E7%94%A8%E5%8F%8A%E8%B8%A9%E5%9D%91/"/>
      <url>2020/02/27/hexo%E4%BD%BF%E7%94%A8%E5%8F%8A%E8%B8%A9%E5%9D%91/</url>
      
        <content type="html"><![CDATA[<p>[toc]</p><h2 id="Hexo使用手册"><a href="#Hexo使用手册" class="headerlink" title="Hexo使用手册"></a>Hexo使用手册</h2><p>介绍了Hexo常用博客命令，博文初始参数、Markdown语法问题、NexT主题</p><p><a href="https://vel.life/Hexo-%E5%8D%9A%E6%96%87%E7%BC%96%E8%BE%91%E6%89%8B%E5%86%8C/">Hexo-博文编辑手册 | 思维之</a></p><h2 id="Front-matter设置"><a href="#Front-matter设置" class="headerlink" title="Front-matter设置"></a>Front-matter设置</h2><p>Page Front-matter</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title:</span><br><span class="line">date:</span><br><span class="line">updated:</span><br><span class="line">type:</span><br><span class="line">comments:</span><br><span class="line">description:</span><br><span class="line">keywords:</span><br><span class="line">top_img:</span><br><span class="line">mathjax:</span><br><span class="line">katex:</span><br><span class="line">aside:</span><br><span class="line">aplayer:</span><br><span class="line">highlight_shrink:</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/vince-lau/blog_img_v1@master/2020/image-20201228211717229.png" alt="image-20201228211717229"></p><p>Post Front-matter</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title:</span><br><span class="line">date:</span><br><span class="line">updated:</span><br><span class="line">tags:</span><br><span class="line">categories:</span><br><span class="line">keywords:</span><br><span class="line">description:</span><br><span class="line">top_img:</span><br><span class="line">comments:</span><br><span class="line">cover:</span><br><span class="line">toc:</span><br><span class="line">toc_number:</span><br><span class="line">copyright:</span><br><span class="line">copyright_author:</span><br><span class="line">copyright_author_href:</span><br><span class="line">copyright_url:</span><br><span class="line">copyright_info:</span><br><span class="line">mathjax:</span><br><span class="line">katex:</span><br><span class="line">aplayer:</span><br><span class="line">highlight_shrink:</span><br><span class="line">aside:</span><br><span class="line"></span><br><span class="line">sticky: 1  # 文章置顶, 数值越大，置顶的优先级就越大</span><br></pre></td></tr></table></figure><table><thead><tr><th>写法</th><th>解释</th></tr></thead><tbody><tr><td>title</td><td>【必需】文章标题</td></tr><tr><td>date</td><td>【必需】文章创建日期</td></tr><tr><td>updated</td><td>【可选】文章更新日期</td></tr><tr><td>tags</td><td>【可选】文章标籤</td></tr><tr><td>categories</td><td>【可选】文章分类</td></tr><tr><td>keywords</td><td>【可选】文章关键字</td></tr><tr><td>description</td><td>【可选】文章描述</td></tr><tr><td>top_img</td><td>【可选】文章顶部图片</td></tr><tr><td>cover</td><td>【可选】文章缩略图(如果没有设置top_img，<br />文章页顶部将显示缩略图，可设为false/图片地址/留空)</td></tr><tr><td>comments</td><td>【可选】显示文章评论模块(默认 true)</td></tr><tr><td>toc</td><td>【可选】显示文章TOC(默认为设置中toc的enable配置)</td></tr><tr><td>toc_number</td><td>【可选】显示toc_number(默认为设置中toc的number配置)</td></tr><tr><td>copyright</td><td>【可选】显示文章版权模块(默认为设置中post_copyright的enable配置)</td></tr><tr><td>copyright_author</td><td>【可选】文章版权模块的文章作者</td></tr><tr><td>copyright_author_href</td><td>【可选】文章版权模块的文章作者链接</td></tr><tr><td>copyright_url</td><td>【可选】文章版权模块的文章连结链接</td></tr><tr><td>copyright_info</td><td>【可选】文章版权模块的版权声明文字</td></tr><tr><td>mathjax</td><td>【可选】显示mathjax(当设置mathjax的per_page: false时，才需要配置，默认 false)</td></tr><tr><td>katex</td><td>【可选】显示katex(当设置katex的per_page: false时，才需要配置，默认 false)</td></tr><tr><td>aplayer</td><td>【可选】在需要的页面加载aplayer的js和css,请参考文章下面的音乐配置</td></tr><tr><td>highlight_shrink</td><td>【可选】配置代码框是否展开(true/false)(默认为设置中highlight_shrink的配置)</td></tr><tr><td>aside</td><td>【可选】显示侧边栏 (默认 true)</td></tr><tr><td>sticky</td><td>【可选】文章置顶，数值越大，置顶的优先级就越大</td></tr></tbody></table><h2 id="使用github-jsDelivr搭建免费图床"><a href="#使用github-jsDelivr搭建免费图床" class="headerlink" title="使用github+jsDelivr搭建免费图床"></a>使用github+jsDelivr搭建免费图床</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">https://cdn.jsdelivr.net/gh/&lt;你的github用户名&gt;/&lt;你的图床仓库名&gt;@&lt;仓库版本号&gt;/图片的路径</span><br><span class="line">https://cdn.jsdelivr.net/gh/starry-skys/myImages@main/test.png</span><br></pre></td></tr></table></figure><p><a href="https://www.cnblogs.com/starry-skys/p/13905766.html">教你如何使用github+jsDelivr搭建免费图床 - 烟雨星空 - 博客园</a></p><h2 id="使用类似typora的markdown引擎"><a href="#使用类似typora的markdown引擎" class="headerlink" title="使用类似typora的markdown引擎"></a>使用类似typora的markdown引擎</h2><p><a href="https://www.wuliang.me/markdown-it-in-hexo/">使用markdown-it来增强hexo中默认的markdown语法 | Gist &amp; Cookbook</a></p><h2 id="加入google、百度链接推送"><a href="#加入google、百度链接推送" class="headerlink" title="加入google、百度链接推送"></a>加入google、百度链接推送</h2><p><a href="https://vel.life/Hexo-%E5%8D%9A%E6%96%87%E7%BC%96%E8%BE%91%E6%89%8B%E5%86%8C/">https://vel.life/Hexo-%E5%8D%9A%E6%96%87%E7%BC%96%E8%BE%91%E6%89%8B%E5%86%8C/</a>)</p><h2 id="利用-docsify-Github-Pages-搭建云笔记"><a href="#利用-docsify-Github-Pages-搭建云笔记" class="headerlink" title="利用 docsify + Github Pages 搭建云笔记"></a><a href="https://notes.abelsu7.top/#/README?id=%E5%88%A9%E7%94%A8-docsify-github-pages-%E6%90%AD%E5%BB%BA%E4%BA%91%E7%AC%94%E8%AE%B0">利用 docsify + Github Pages 搭建云笔记</a></h2><h2 id="hexo文章互推"><a href="#hexo文章互推" class="headerlink" title="hexo文章互推"></a><a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章互推</a></h2><h2 id="添加视频和音乐"><a href="#添加视频和音乐" class="headerlink" title="添加视频和音乐"></a>添加视频和音乐</h2><h2 id="hexo命令使用"><a href="#hexo命令使用" class="headerlink" title="hexo命令使用"></a>hexo命令使用</h2>]]></content>
      
      
      <categories>
          
          <category> tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> butterfly </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
